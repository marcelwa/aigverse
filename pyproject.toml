[build-system]
requires = [
    "scikit-build-core>=0.10.1",
    "setuptools-scm>=8.1"
]
build-backend = "scikit_build_core.build"

[project]
name = "aigverse"
description = "A Python library for working with logic networks, synthesis, and optimization."
readme = "README.md"
authors = [
    { name = "Marcel Walter", email = "marcel.walter@tum.de" }
]
keywords = ["aigverse", "logic", "synthesis", "AIG", "optimization"]
license = { file = "LICENSE" }

classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Typing :: Typed"
]

requires-python = ">=3.8"

dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7.2", "aigverse"]

[project.urls]
Source = "https://github.com/marcelwa/aigverse"
Tracker = "https://github.com/marcelwa/aigverse/issues"
#Documentation = "https://aigverse.readthedocs.io/en/latest/"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"
# Set the wheel install directory
wheel.install-dir = "aigverse"
# Set required Ninja version
ninja.version = ">=1.10"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}/{build_type}"
# Explicitly set the package directory
wheel.packages = ["bindings/aigverse"]
# Only build the Python bindings target
build.targets = ["pyaigverse"]
# Only install the Python package component
install.components = ["aigverse_Python"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["bindings/aigverse/_version.py"]
sdist.exclude = [
    "**/.git",
    "**/.github",
    "**/app",
    "**/apps",
    "**/css",
    "**/html",
    "**/doc",
    "**/benchmark",
    "**/benchmarks",
    "**/experiment",
    "**/experiments",
    "**/examples",
    "**/include",
    "**/libs",
    "**/cmake-build-**",
    "**/docs",
    "**/plots",
    "**/test",
    "**/tests",
    "**/nauty",
    "**.cpp",
    "**.hpp",
    "**.pdf",
    "**.ans",
    "**.out",
    "**.log",
    "**.xml",
    "**CMakeList.txt",
    "**__pycache__"
]

[tool.scikit-build.cmake.define]
MOCKTURTLE_EXAMPLES = "OFF"
AIGVERSE_ENABLE_IPO = "ON"
AIGVERSE_ENABLE_PCH = "ON"
AIGVERSE_ENABLE_UNITY_BUILD = "ON"

[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.check-sdist]
sdist-only = ["bindings/aigverse/_version.py"]
git-only = [
    "docs/*",
    "libs/*",
    "test/*",
    ".idea/*",
]
default-ignore = true
mode = "git"
build-backend = "auto"


[tool.setuptools_scm]
write_to = "bindings/aigverse/_version.py"


[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["bindings/aigverse/test"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true


[tool.cibuildwheel]
build = "cp3*"
archs = "auto64"
skip = "*-musllinux*"
test-command = "python -c \"from aigverse import Aig\""
build-frontend = "build[uv]"
free-threaded-support = true
manylinux-x86_64-image = "manylinux_2_28"

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.cibuildwheel.windows]
environment = { CMAKE_GENERATOR = "Ninja" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.uv]
reinstall-package = ["aigverse"]


[tool.ruff]
line-length = 120
preview = true
unsafe-fixes = true


[tool.ruff.lint]
extend-select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", "B904", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "FLY", # flynt
    "FURB", # refurb
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging-format
    "N", # flake8-naming
    "NPY", # numpy
    "PERF", # perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    #    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific
    #    "S", # flake8-bandit
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID251", # flake8-tidy-imports.banned-api
    "TRY", # tryceratops
    "UP", # pyupgrade
    "YTT", # flake8-2020
]

ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotatio n for `cls` in classmethod
    "ISC001", # Conflicts with formatter
    "PLR09", # Too many <...>
    "PLR2004", # Magic value used in comparison
    "S101", # Use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"bindings/aigverse/test/**" = ["T20", "ANN", "D"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "PYI021"]  # pydocstyle
"*.ipynb" = [
    "D", # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"
